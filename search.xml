<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Next主题定制</title>
    <url>/Hexo/Hexo+Next%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6/</url>
    <content><![CDATA[<h3 id="设置主题风格"><a href="#设置主题风格" class="headerlink" title="设置主题风格"></a>设置主题风格</h3><p>打开 <code>themes/next/_config.yml</code>件，搜索 scheme 关键字，将你需用启用的 <code>scheme</code> 前面注释 <code>#</code> 去除即可。</p>
<h4 id="Scheme-Settings"><a href="#Scheme-Settings" class="headerlink" title="#Scheme Settings"></a>#Scheme Settings</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse #默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 </span></span><br><span class="line"><span class="comment">#scheme: Mist #Muse 的紧凑版本，整洁有序的单栏外观 </span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span> <span class="comment">#双栏 Scheme，小家碧玉似的清新 </span></span><br><span class="line"><span class="comment">#scheme: Gemini #类似 Pisces</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="菜单栏-menu"><a href="#菜单栏-menu" class="headerlink" title="菜单栏 menu"></a>菜单栏 menu</h3><p>原生菜单栏有主页、关于、分类、标签等数个选项，但是在配置文件中是注释掉的状态，这里我们自行修改注释就行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>注意点：</strong></p>
<ul>
<li>如果事先没有通过<code>hexo new page &lt;pageName&gt;</code>来创建页面的话，即使在配置文件中取消注释，页面也没法显示</li>
<li>我们也可以添加自己想要添加的页面，不用局限在配置文件里提供的选择里面</li>
<li><code>||</code>后面是<a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener" title="Font Awesome">Font Awesome</a>里的文件对应的名称</li>
<li><code>menu_icons</code>记得选<code>enable: true</code>（默认应该是<code>true</code>）</li>
</ul>
<h4 id="修改移动端菜单按钮颜色"><a href="#修改移动端菜单按钮颜色" class="headerlink" title="修改移动端菜单按钮颜色"></a>修改移动端菜单按钮颜色</h4><p>打开<code>themes\next\source\css\_custom\custom.styl</code>文件, 添加如下代码:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn-bar</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">$black</span>-deep;<span class="comment">//#222</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="去除顶部黑条"><a href="#去除顶部黑条" class="headerlink" title="去除顶部黑条"></a>去除顶部黑条</h4><p>打开<code>themes\next\source\css\_custom\custom.styl</code>文件, 添加如下代码:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.headband</span> &#123; <span class="attribute">display</span>: none; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="个人社交信息-social"><a href="#个人社交信息-social" class="headerlink" title="个人社交信息 social"></a>个人社交信息 social</h3><p>在social里我们可以自定义自己想要在个人信息部分展现的账号，同时给他们加上图标。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">GitHub:</span> <span class="string">https://github.com/White8818</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">E-Mail:</span> <span class="string">mailto:akun8818@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line"><span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line"><span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line"><span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br></pre></td></tr></table></figure>
<p><strong>注意点</strong>：</p>
<ul>
<li><code>||</code>后面对应的名称是<a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener" title="Font Awesome">Font Awesome</a>里图标的名称，如果我们选择的账号没有对应的图标（如豆瓣、知乎），我们可以在<a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener" title="Font Awesome">Font Awesome</a>库里去选择自己喜欢的图标</li>
<li>建议不要找太新的<a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener" title="Font Awesome">Font Awesome</a>图标，主题关联的库版本没有那么新，很可能显示不了或者显示一个地球</li>
</ul>
<h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><h4 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h4><p>打开<code>themes/next/_config.yml</code>文件，搜索<code>Sidebar Avatar</code>关键字，去掉<code>avatar</code>前面的<code>#</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># in theme directory(source/images): /images/avatar.jpg</span></span><br><span class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.jpg</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">http://example.com/avatar.png</span></span><br></pre></td></tr></table></figure>
<p>或者使用本地图片,把图片放入<code>themes/next/source/images</code>下,修改 <code>avatar</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.png</span></span><br></pre></td></tr></table></figure>

<h4 id="设置头像边框为圆形框"><a href="#设置头像边框为圆形框" class="headerlink" title="设置头像边框为圆形框"></a>设置头像边框为圆形框</h4><p>打开位于<code>themes/next/source/css/_common/components/sidebar/sidebar-author.syl</code>文件,修改如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line"><span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line"><span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line"><span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">// 修改头像边框</span><br><span class="line"><span class="selector-tag">border-radius</span>: 50%;</span><br><span class="line"><span class="selector-tag">-webkit-border-radius</span>: 50%;</span><br><span class="line"><span class="selector-tag">-moz-border-radius</span>: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浏览页面的时候显示当前浏览进度"><a href="#浏览页面的时候显示当前浏览进度" class="headerlink" title="浏览页面的时候显示当前浏览进度"></a>浏览页面的时候显示当前浏览进度</h4><p>打开<code>themes/next/_config.yml</code>,搜索关键字<code>scrollpercent</code>,把<code>false</code>改为<code>true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>如果想把<code>top</code>按钮放在侧边栏,打开<code>themes/next/_config.yml</code>,搜索关键字 <code>b2t</code>,把<code>false</code>改为<code>true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar</span></span><br><span class="line"><span class="attr">b2t:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="添加RSS订阅"><a href="#添加RSS订阅" class="headerlink" title="添加RSS订阅"></a>添加RSS订阅</h3><p>打开终端, 在你<code>Hexo</code>站点目录下执行如下命令：<em>//注意不要复制<code>$</code>符号</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>打开<code>Hexo</code>站点下的<code>_config.yml</code>, 添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># feed</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">hub:</span></span><br><span class="line"><span class="attr">content:</span></span><br></pre></td></tr></table></figure>

<h3 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h3><p>打开<code>themes/next/source/css/_custom/custom.styl</code>, 向里面加代码:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">-webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">-moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开启版权声明"><a href="#开启版权声明" class="headerlink" title="开启版权声明"></a>开启版权声明</h3><p>主题配置文件下, 搜索关键字<code>post_copyright</code>, <code>enable</code>改为<code>true</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">主页文章添加阴影效果</span></span><br><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line"><span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure>
<p>设置新建文章自动开启<code>copyright</code>, 即新建文章自动显示自定义的版权声明,设置 <code>your site/scaffolds/post.md</code>文件</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">type: "categories"</span><br><span class="line">categories:</span><br><span class="line">copyright: true #新增,开启</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带<code>#</code>号的标签</h3><p>打开<code>themes/next/layout/_macro/post.swig</code>文件,搜索<code>rel=&quot;tag&quot;&gt;#</code>,将 <code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="post-tags"&gt;</span><br><span class="line">&#123;% for tag in post.tags %&#125;</span><br><span class="line">&lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h3><p>打开<code>themes/next/_config.yml</code>，搜索关键字<code>pace</code>,设置为<code>true</code>,可以更换加载样式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment">#pace-theme-big-counter</span></span><br><span class="line"><span class="comment">#pace-theme-bounce</span></span><br><span class="line"><span class="comment">#pace-theme-barber-shop</span></span><br><span class="line"><span class="comment">#pace-theme-center-atom</span></span><br><span class="line"><span class="comment">#pace-theme-center-circle</span></span><br><span class="line"><span class="comment">#pace-theme-center-radar</span></span><br><span class="line"><span class="comment">#pace-theme-center-simple</span></span><br><span class="line"><span class="comment">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment">#pace-theme-fill-left</span></span><br><span class="line"><span class="comment">#pace-theme-flash</span></span><br><span class="line"><span class="comment">#pace-theme-loading-bar</span></span><br><span class="line"><span class="comment">#pace-theme-mac-osx</span></span><br><span class="line"><span class="comment">#pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-flash</span> <span class="comment">#替换更换样式</span></span><br></pre></td></tr></table></figure>

<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>在你<code>Hexo</code>站点的根目录下执行:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>打开<code>Hexo</code>站点的<code>_config.yml</code>, 添加配置:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>打开<code>themes/next/_config.yml</code>, 搜索关键字<code>local_search</code>,设置为<code>true</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line"><span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line"><span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="修改网页底部"><a href="#修改网页底部" class="headerlink" title="修改网页底部"></a>修改网页底部</h3><h4 id="修改图标"><a href="#修改图标" class="headerlink" title="修改图标"></a>修改图标</h4><p>在<a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener" title="Font Awesome">图标库</a>中找到你自己喜欢的图标 ,打开<code>themes/next_config.yml</code>,搜索关键字<code>authoricon</code>, 替换图标名 </p>
<h4 id="隐藏网页底部-Hexo-强力驱动"><a href="#隐藏网页底部-Hexo-强力驱动" class="headerlink" title="隐藏网页底部 Hexo 强力驱动"></a>隐藏网页底部 Hexo 强力驱动</h4><p>打开主题配置文件, 搜索关键字<code>copyright</code>, 如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Footer `powered-by` and `theme-info` copyright</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="增加统计"><a href="#增加统计" class="headerlink" title="增加统计"></a>增加统计</h4><ul>
<li>统计功能</li>
<li>显示文章字数统计</li>
<li>阅读时长</li>
<li>总字数</li>
</ul>
<p>在站点的根目录下执行：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ npm i <span class="comment">--save hexo-wordcount</span></span><br></pre></td></tr></table></figure>
<p>打开<code>themes/next/_config.yml</code>，搜索关键字<code>post_wordcount</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#字数统计</span></span><br><span class="line"><span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#预览时间</span></span><br><span class="line"><span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#总字数,显示在页面底部</span></span><br><span class="line"><span class="attr">totalcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="文章顶部显示更新时间"><a href="#文章顶部显示更新时间" class="headerlink" title="文章顶部显示更新时间"></a>文章顶部显示更新时间</h3><p>打开主题配置文件<code>_config.yml</code> ,搜索关键字<code>updated_at</code>设置为<code>true</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">updated_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h3><p>默认情况下访问<code>URL</code>路径为：<code>domain/2017/08/18/关于本站</code>,修改为 <code>domain/About/关于本站</code>。 编辑<code>Hexo</code>站点下的<code>_config.yml</code>文件，修改其中的<code>permalink</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:title/</span></span><br></pre></td></tr></table></figure>

<h3 id="新建404界面"><a href="#新建404界面" class="headerlink" title="新建404界面"></a>新建404界面</h3><p>打开终端, 在站点根目录下, 输入<code>hexo new page 404</code>, 默认在<code>Hexo</code>站点下<code>/source/404/index.md</code>打开新建的<code>404</code>界面，在顶部插入一行，写上 <code>permalink: /404</code>，这表示指定该页固定链接为<code>http://&quot;主页&quot;/404.html</code>。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: #404 Not Found：该页无法显示</span><br><span class="line">date: 2017-09-06 15:37:18</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>如果你不想编辑属于自己的<code>404</code>界面,可以显示腾讯公益<code>404</code>界面,代码如下：</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></span></span><br><span class="line"><span class="xml">charset="utf-8" homePageUrl="/"</span></span><br><span class="line"><span class="xml">homePageName="回到我的主页"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h3><p>当使用<code>Pisces</code>主题时，网站标题栏背景颜色是黑色的，感觉不好看，可以在<code>source/css/_schemes/Pisces/_brand.styl</code>中修改：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-meta</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line"><span class="attribute">background</span>: <span class="variable">$blue</span>-dodger; <span class="comment">//修改为自己喜欢的颜色</span></span><br><span class="line"></span><br><span class="line">+tablet() &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line">+mobile() &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是，我们一般不主张这样修改源码的，在<code>next/source/css/_custom</code>目录下面专门提供了<code>custom.styl</code>供我们自定义样式的，因此也可以在<code>custom.styl</code>里面添加：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-class">.site-meta</span> &#123;<span class="comment">//标题栏背景色</span></span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.brand</span> &#123;<span class="comment">//标题颜色和鼠标选中颜色</span></span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$black</span>-deep;</span><br><span class="line">&amp;:hover &#123; <span class="attribute">color</span>: <span class="variable">$black</span>-deep; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-subtitle</span> &#123;<span class="comment">//副标题颜色</span></span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$black</span>-deep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改内容区域的宽度"><a href="#修改内容区域的宽度" class="headerlink" title="修改内容区域的宽度"></a>修改内容区域的宽度</h3><p><code>Pisces</code>风格时可以用下面的方法：<code>source/css/_schemes/Pisces/_layout.styl</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">header&#123; <span class="attribute">width</span>: <span class="number">93%</span>; &#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">93%</span>; &#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: calc(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br></pre></td></tr></table></figure>

<h4 id="去除移动端两侧的空白区域"><a href="#去除移动端两侧的空白区域" class="headerlink" title="去除移动端两侧的空白区域"></a>去除移动端两侧的空白区域</h4><p>打开主题路径下的<code>_config.yml</code>文件, 找到<code>mobile_layout_economy</code>字段,将<code>false</code>改为<code>true</code></p>
<h3 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h3><p>在<code>themes/next/source/css/_custom/custom.styl</code>中添加如下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">background:url(/images/bg.jpg);</span><br><span class="line"><span class="attribute">background-size</span>:cover;</span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line"><span class="attribute">background-attachment</span>:fixed;</span><br><span class="line"><span class="attribute">background-position</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="各版块透明度修改"><a href="#各版块透明度修改" class="headerlink" title="各版块透明度修改"></a>各版块透明度修改</h3><h4 id="内容板块透明"><a href="#内容板块透明" class="headerlink" title="内容板块透明"></a>内容板块透明</h4><p>博客根目录<code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code>.content-wrap</code>标签下<code>background: white</code>修改为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>); <span class="comment">//0.7是透明度</span></span><br></pre></td></tr></table></figure>
<h4 id="菜单栏背景"><a href="#菜单栏背景" class="headerlink" title="菜单栏背景"></a>菜单栏背景</h4><p>还是当前文件下: <code>.header-inner</code>标签下<code>background: white</code>修改为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>); <span class="comment">//0.7是透明度</span></span><br></pre></td></tr></table></figure>
<p>博客根目录<code>themes\next\source\css\_schemes\Pisces\_sidebar.styl</code>文件<code>.sidebar-inner</code>标签<br>修改文章目录和站点概览透明度</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>); <span class="comment">//0.7是透明度</span></span><br></pre></td></tr></table></figure>

<p>参考文章:<br><a href="http://www.dragonstyle.win/3358042383.html" target="_blank" rel="noopener">Hexo+Next主题优化</a><br><a href="https://www.jianshu.com/p/21c94eb7bcd1" target="_blank" rel="noopener">绝配：hexo+next主题及我走过的坑</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>主题</tag>
        <tag>配置</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发-阿拉伯适配RTL</title>
    <url>/iOS%E5%BC%80%E5%8F%91/iOS%E5%BC%80%E5%8F%91-%E9%98%BF%E6%8B%89%E4%BC%AF%E9%80%82%E9%85%8DRTL/</url>
    <content><![CDATA[<h2 id="什么是RTL布局"><a href="#什么是RTL布局" class="headerlink" title="什么是RTL布局"></a>什么是RTL布局</h2><p>RTL布局是针对中东地区的书写习惯适配的一套从右向左的布局方式，字面意思就是<code>Right-to-Left</code>.<br>针对iOS9之后的RTL适配，苹果有一个<a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/SupportingRight-To-LeftLanguages/SupportingRight-To-LeftLanguages.html" target="_blank" rel="noopener">官方文档</a>教我们怎么做适配。</p>
<a id="more"></a>
<p><strong>举个例子对比：</strong></p>
<div align="center">
    <img src="screen_image3.jpeg" width="700"/>
</div>
### 适配RTL之前的一个小技巧

<p>在Xcode的项目图标点击<code>Edit Scheme</code> -&gt;<code>Run</code>-&gt;<code>Options</code>，找到<code>Application Language</code>，可以指定app运行时的语言环境, 就不需要手动进入设置修改系统语言了.<br><strong>如下图:</strong></p>
<div align="center">
    <img src="screen_image2.jpeg" width="800"/>
</div>

<h2 id="开始适配"><a href="#开始适配" class="headerlink" title="开始适配"></a>开始适配</h2><h3 id="切换RTL布局"><a href="#切换RTL布局" class="headerlink" title="切换RTL布局"></a>切换RTL布局</h3><p>一般我们做了阿拉伯语言的适配之后, 用户只要系统语言是阿拉伯语言环境, 系统就会自动帮我们的app设置为RTL布局. 但是有一种情况是比如产品需要我们添加一个app内切换语言的功能, 其中就包括阿拉伯语言. 这时App语言不一定跟系统语言保持一致, 也许系统是英文，App内部设置成了阿拉伯语. 我们依然需要变成RTL布局，系统是不会帮我们完成这项任务的，我们只有自己来设置RTL.</p>
<p>由于目前我们的项目iOS支持版本是从iOS9开始, 正好iOS9之后系统提供了相应的API, 可以来强行将视图的布局切换为RTL布局.</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UISemanticContentAttribute</span>) &#123;</span><br><span class="line">    <span class="built_in">UISemanticContentAttributeUnspecified</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">UISemanticContentAttributePlayback</span>, <span class="comment">// for playback controls such as Play/RW/FF buttons and playhead scrubbers</span></span><br><span class="line">    <span class="built_in">UISemanticContentAttributeSpatial</span>, <span class="comment">// for controls that result in some sort of directional change in the UI, e.g. a segmented control for text alignment or a D-pad in a game</span></span><br><span class="line">    <span class="built_in">UISemanticContentAttributeForceLeftToRight</span>,</span><br><span class="line">    <span class="built_in">UISemanticContentAttributeForceRightToLeft</span></span><br><span class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UISemanticContentAttribute</span> semanticContentAttribute <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br></pre></td></tr></table></figure>
<p><code>UView</code>有一个<code>semanticContentAttribute</code>的属性，当我们将其设置成<code>UISemanticContentAttributeForceRightToLeft</code>之后，<code>UIView</code>将强制变为RTL布局。当然在非RTL语言下，我们需要设置它为<code>UISemanticContentAttributeForceLeftToRight</code>，来适配系统是阿拉伯语，App是其他语言不需要RTL布局的情况。</p>
<p>一般情况下, 我们设置<code>[UIView appearance]</code>的<code>semanticContentAttribute</code>属性就能达到绝大部分视图的RTL布局效果, 因为基本所有视图都继承于<code>UIView</code>.</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">UIView</span> appearance].semanticContentAttribute = <span class="built_in">UISemanticContentAttributeForceRightToLeft</span>;</span><br></pre></td></tr></table></figure>
<p>使用<code>[UIView appearance]</code>设置后，大部分的<code>View</code>看上去正常了。除了搜索栏。使用<code>[UIView appearance]</code>设置后，搜索栏是不生效的。不过不用担心，我们只需要设置一下<code>[UISearchBar appearance]</code>即可.</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">UISearchBar</span> appearance].semanticContentAttribute = <span class="built_in">UISemanticContentAttributeForceRightToLeft</span>;</span><br></pre></td></tr></table></figure>
<h3 id="布局适配"><a href="#布局适配" class="headerlink" title="布局适配"></a>布局适配</h3><h4 id="Autolayout-约束布局"><a href="#Autolayout-约束布局" class="headerlink" title="Autolayout 约束布局"></a>Autolayout 约束布局</h4><p>设置完<code>view</code>的<code>semanticContentAttribute</code>后，如果使用的是<code>Autolayout</code>布局，并且<code>Autolayout</code>下，使用的是<code>leading</code>和<code>trailing</code>，系统会自动帮助我们调整布局，将其适配RTL。但是如果使用的是<code>left</code>和<code>right</code>，系统是不会这么做的。</p>
<p>所以为了适配布局，我们需要将所有的<code>left</code>,<code>right</code>替换成<code>leading</code>和<code>trailing</code>。</p>
<p>如果使用了可视化编程, <code>xib</code>或者<code>storyboard</code>上面添加的约束本身就是使用的<code>leading</code>和<code>trailing</code>,   所以项目中如果使用了可视化的视图, 是会自动适配RTL布局的.</p>
<p><strong>注意:同一个view不要同时使用<code>left</code>, <code>right</code>和<code>leading</code>, <code>trailing</code>属性,  会<code>crash</code>崩溃.</strong></p>
<h4 id="Frame布局"><a href="#Frame布局" class="headerlink" title="Frame布局"></a>Frame布局</h4><p>目前我们项目中主要是Masonry和Frame两种布局混用的方式. Masonry就是上面约束的修改方式就可以完成适配.<br>对于Frame布局, 其实就是重新计算<code>frame.origin.x</code>, 因为RTL模式下, 改变只是<code>x</code>轴的起点, <code>y</code>和视图的<code>size</code>是不变的. 而且对于一个<code>view</code>, 如果知道它的父视图的<code>width</code>, 就可以计算出<code>view</code>在RTL模式下的<code>frame</code>, 所以我们可以给<code>UIView</code>封装一个分类<code>category</code>: </p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UIView+RTL.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIView</span> (<span class="title">RTL</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setRTLFrame:(<span class="built_in">CGRect</span>)frame width:(<span class="built_in">CGFloat</span>)width &#123;</span><br><span class="line">    <span class="keyword">if</span> (kBuny_isRTL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.superview == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">NSAssert</span>(<span class="number">0</span>, <span class="string">@"must invoke after have superView"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">CGFloat</span> x = width - frame.origin.x - frame.size.width;</span><br><span class="line">        frame.origin.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.frame = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setRTLFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    [<span class="keyword">self</span> setRTLFrame:frame width:<span class="keyword">self</span>.superview.frame.size.width];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)resetFrameToFitRTL &#123;</span><br><span class="line">    [<span class="keyword">self</span> setRTLFrame:<span class="keyword">self</span>.frame];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这样我们只需要在使用了Frame布局的地方, 添加一句类似如下的代码:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">UIView *view = [[UIView alloc] initWithFrame:CGRectMake(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)];</span><br><span class="line">[self.view addSubview:view];</span><br><span class="line">[view resetFrameToFitRTL];</span><br></pre></td></tr></table></figure>
<p>就可以完成Frame布局的适配.</p>
<p>从适配的工作量来讲, Frame要比Autolayout繁琐一些, 所以建议以后的新代码, 建议能用Masonry的就用Masonry, 而且要用<code>leading</code>和<code>trailing</code>属性. </p>
<h4 id="图片镜像"><a href="#图片镜像" class="headerlink" title="图片镜像"></a>图片镜像</h4><p>由于一些图片素材, 在RTL下是需要镜像反转的, 比如个人中心<code>cell</code>上的箭头, 我们如果没使用系统自带的, 而是用的图片素材, 那么正常模式下, 箭头是向右的, RTL模式下就需要将它镜像朝右.<br>系统针对这种情况提供了一个镜像的方法:</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">// Creates a <span class="keyword">version</span> of this image that, when assigned to a UIImageView’s image <span class="keyword">property</span><span class="title"></span>, draws its underlying image contents horizontally mirrored when running under a right-to-left language. Affects the flipsForRightToLeftLayoutDirection <span class="keyword">property</span><span class="title"></span>; does not affect the imageOrientation <span class="keyword">property</span>.<span class="title"></span></span><br><span class="line">- (UIImage *)imageFlippedForRightToLeftLayoutDirection NS_AVAILABLE_IOS(<span class="number">9</span>_0);</span><br></pre></td></tr></table></figure>
<p>但是这个方法并不好用。通过切换系统语言，来适配RTL应该是没问题的。但是在App内部切换语言，手动修改RTL布局，系统的这个方法就经常出现错误镜像的情况。<br>所以我们可以再给<code>UIImage</code>写一个镜像的分类来达到相同的效果:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)rtl_orientationUpMirrored &#123;</span><br><span class="line">    <span class="keyword">if</span> (kBuny_isRTL) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageWithCGImage:<span class="keyword">self</span>.CGImage</span><br><span class="line">                                   scale:<span class="keyword">self</span>.scale</span><br><span class="line">                             orientation:<span class="built_in">UIImageOrientationUpMirrored</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Label的textAlignment"><a href="#Label的textAlignment" class="headerlink" title="Label的textAlignment"></a>Label的textAlignment</h4><p>在iOS9之后<code>UILabel</code>的<code>textAlignment</code>是<code>NSTextAlignmentNatural</code>, 这个属性在正常语言环境下是居左的, 在RTL下则是居右的, 会自动适配RTL.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Use</span> the <span class="keyword">default</span> alignment associated <span class="keyword">with</span> the <span class="keyword">current</span> localization <span class="keyword">of</span> the app. The <span class="keyword">default</span> alignment <span class="keyword">for</span> <span class="keyword">left</span>-<span class="keyword">to</span>-<span class="keyword">right</span> scripts <span class="keyword">is</span> NSTextAlignmentLeft, <span class="keyword">and</span> the <span class="keyword">default</span> alignment <span class="keyword">for</span> <span class="keyword">right</span>-<span class="keyword">to</span>-<span class="keyword">left</span> scripts <span class="keyword">is</span> NSTextAlignmentRight.</span><br><span class="line">@property(nonatomic) NSTextAlignment textAlignment; // default is NSTextAlignmentNatural (before iOS 9, the default was NSTextAlignmentLeft)</span><br></pre></td></tr></table></figure>
<p>但是有时当我们在系统内切换语言的时候，系统经常会错误的设置<code>textAlignment</code>。所以我们需要自己去适配<code>textAlignment</code>.<br>以<code>UILabel</code>为例，我们<code>hook</code>它的初始化方法，根据当前是否是RTL，给它一个正确的默认值:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UILabel+RTL.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UILabel</span> (<span class="title">RTL</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    BNYMethodSwizzling([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(init), <span class="keyword">@selector</span>(rtl_init));</span><br><span class="line">    BNYMethodSwizzling([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(initWithFrame:), <span class="keyword">@selector</span>(rtl_initWithFrame:));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)rtl_init &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> rtl_init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.textAlignment = kBuny_isRTL ? <span class="built_in">NSTextAlignmentNatural</span> : <span class="built_in">NSTextAlignmentLeft</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)rtl_initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> rtl_initWithFrame:frame]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.textAlignment = kBuny_isRTL ? <span class="built_in">NSTextAlignmentNatural</span> : <span class="built_in">NSTextAlignmentLeft</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实根据下面的参考文章, 还有一些点需要适配, 但是根据目前项目中遇到的情况, 以上过程, 基本项目中大部分的页面都可以完成RTL的适配. </p>
<p>参考文章:<br><a href="https://www.jianshu.com/p/3383ca5f6de0" target="_blank" rel="noopener">RTL适配历程</a><br><a href="https://blog.mzying.com/index.php/archives/154/" target="_blank" rel="noopener">阿拉伯语言的自动适配</a></p>
]]></content>
      <categories>
        <category>iOS开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>阿拉伯</tag>
        <tag>RTL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用WKWebview拦截替换本地资源</title>
    <url>/iOS%E5%BC%80%E5%8F%91/%E4%BD%BF%E7%94%A8WKWebview%E6%8B%A6%E6%88%AA%E6%9B%BF%E6%8D%A2%E6%9C%AC%E5%9C%B0%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<blockquote>
<p><code>WKWebView</code>替换本地资源的原理是通过<code>NSURLProtocol</code>代理<code>WKWebView</code>内的所有网络请求, 中间拿到每次加载的<code>URL</code>, 然后动态替换成本地沙盒内的对应路径下的资源文件.</p>
</blockquote>
<h2 id="什么是NSURLProtocol"><a href="#什么是NSURLProtocol" class="headerlink" title="什么是NSURLProtocol"></a>什么是NSURLProtocol</h2><p><code>NSURLProtocol</code>是URL Loading System的重要组成部分。它听上去像一个协议类, 其实不是, 它是一个抽象类, 我们可以子类化来拦截网络请求。可以拦截的网络请求包括<code>NSURLSession</code>，<code>NSURLConnection</code>以及<code>UIWebvIew</code>。本来之前是不能拦截<code>WKWebView</code>的, 因为<code>WKWebView</code> 在独立于 app 进程之外的进程中执行网络请求，请求数据不经过主进程，因此，在 <code>WKWebView</code> 上直接使用 <code>NSURLProtocol</code>无法拦截请求。</p>
<p>但是有大神通过阅读webkit的源码, 以及使用反射的方式拿到了<code>WKWebView</code>用来处理请求的上下文和注册反注册方法: <code>WKBrowsingContextController</code>和<code>registerSchemeForCustomProtocol</code>, <code>unregisterSchemeForCustomProtocol</code>. 然后通过KVC拿到<code>browsingContextController</code>实例, 把<code>http</code>和<code>https</code>请求注册给<code>NSURLProtocol</code>处理.</p>
<a id="more"></a>

<h2 id="NSURLProtocol结合WKWebView的使用"><a href="#NSURLProtocol结合WKWebView的使用" class="headerlink" title="NSURLProtocol结合WKWebView的使用"></a>NSURLProtocol结合WKWebView的使用</h2><h3 id="给NSURLProtocol写一个WKWebView的分类"><a href="#给NSURLProtocol写一个WKWebView的分类" class="headerlink" title="给NSURLProtocol写一个WKWebView的分类"></a>给NSURLProtocol写一个WKWebView的分类</h3><p>头文件 <code>NSURLProtocol+WKWebVIew.h</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSURLProtocol</span> (<span class="title">WKWebVIew</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)wk_registerScheme:(<span class="built_in">NSString</span>*)scheme;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)wk_unregisterScheme:(<span class="built_in">NSString</span>*)scheme;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p><code>NSURLProtocol+WKWebVIew.m</code>文件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"NSURLProtocol+WKWebVIew.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;WebKit/WebKit.h&gt;</span></span></span><br><span class="line"><span class="comment">//FOUNDATION_STATIC_INLINE 属于属于runtime范畴，你的.m文件需要频繁调用一个函数,可以用static inline来声明。从SDWebImage从get到的。</span></span><br><span class="line">FOUNDATION_STATIC_INLINE Class ContextControllerClass() &#123;</span><br><span class="line">    <span class="keyword">static</span> Class cls;</span><br><span class="line">    <span class="keyword">if</span> (!cls) &#123;</span><br><span class="line">        cls = [[[<span class="built_in">WKWebView</span> new] valueForKey:<span class="string">@"browsingContextController"</span>] <span class="keyword">class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FOUNDATION_STATIC_INLINE SEL RegisterSchemeSelector() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSSelectorFromString</span>(<span class="string">@"registerSchemeForCustomProtocol:"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FOUNDATION_STATIC_INLINE SEL UnregisterSchemeSelector() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSSelectorFromString</span>(<span class="string">@"unregisterSchemeForCustomProtocol:"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSURLProtocol</span> (<span class="title">WebKitSupport</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)wk_registerScheme:(<span class="built_in">NSString</span> *)scheme &#123;</span><br><span class="line">    Class cls = ContextControllerClass();</span><br><span class="line">    SEL sel = RegisterSchemeSelector();</span><br><span class="line">    <span class="keyword">if</span> ([(<span class="keyword">id</span>)cls respondsToSelector:sel]) &#123;</span><br><span class="line">    <span class="comment">// 放弃编辑器警告</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></span><br><span class="line">        [(<span class="keyword">id</span>)cls performSelector:sel withObject:scheme];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)wk_unregisterScheme:(<span class="built_in">NSString</span> *)scheme &#123;</span><br><span class="line">    Class cls = ContextControllerClass();</span><br><span class="line">    SEL sel = UnregisterSchemeSelector();</span><br><span class="line">    <span class="keyword">if</span> ([(<span class="keyword">id</span>)cls respondsToSelector:sel]) &#123;</span><br><span class="line">     <span class="comment">// 放弃编辑器警告</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></span><br><span class="line">        [(<span class="keyword">id</span>)cls performSelector:sel withObject:scheme];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>这样我们就可以方便的给<code>WKWebView</code>进行注册和反注册, 毕竟我们只需要代理<code>WKWebView</code>内的请求, 所以当我们<code>webview</code>关闭的时候, 要取消注册.</p>
<h3 id="子类化NSURLProtocol"><a href="#子类化NSURLProtocol" class="headerlink" title="子类化NSURLProtocol"></a>子类化NSURLProtocol</h3><p>如上文所说，<code>NSURLProtocol</code>是一个抽象类。我们要使用它的时候需要创建它的一个子类.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LPURLProtocol</span> : <span class="title">NSURLProtocol</span></span></span><br></pre></td></tr></table></figure>

<p>使用<code>NSURLProtocol</code>的主要可以分为5个步骤：<br>注册—&gt;拦截—&gt;转发—&gt;回调—&gt;结束</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册:"></a>注册:</h3><p>在<code>WKWebView</code>初始化之前:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">NSURLProtocol</span> registerClass:[LPURLProtocol <span class="keyword">class</span>]];</span><br><span class="line">[<span class="built_in">NSURLProtocol</span> wk_registerScheme:<span class="string">@"http"</span>];</span><br><span class="line">[<span class="built_in">NSURLProtocol</span> wk_registerScheme:<span class="string">@"https"</span>];</span><br></pre></td></tr></table></figure>

<h3 id="拦截"><a href="#拦截" class="headerlink" title="拦截:"></a>拦截:</h3><p>然后在我们子类化的<code>LPURLProtocol.m</code>内加入以下代码:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *extension = request.URL.pathExtension;<span class="comment">//获取拦截URL的文件后缀</span></span><br><span class="line">    <span class="built_in">BOOL</span> isSource = [[<span class="keyword">self</span> resourceTypes] indexOfObjectPassingTest:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> [extension compare:obj options:<span class="built_in">NSCaseInsensitiveSearch</span>] == <span class="built_in">NSOrderedSame</span>;</span><br><span class="line">    &#125;] != <span class="built_in">NSNotFound</span>;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSURLProtocol</span> propertyForKey:kURLProtocolMark inRequest:request] == <span class="literal">nil</span> &amp;&amp; isSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的<code>resourceTypes</code>是我自定义的方法, 用来获取我需要拦截替换的后缀名数组. 当我们拦截到请求之后, 通过判断当前请求URL的后缀是否包含在此数组内, 包含在内则进行下一步资源替换的操作.以下是内容:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *)resourceTypes&#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@"js"</span>, <span class="string">@"png"</span>, <span class="string">@"jpeg"</span>, <span class="string">@"jpg"</span>, <span class="string">@"ico"</span>, <span class="string">@"xml"</span>, <span class="string">@"css"</span>, <span class="string">@"html"</span>, <span class="string">@"vsh"</span>, <span class="string">@"fsh"</span>, <span class="string">@"txt"</span>, <span class="string">@"atlas"</span>, <span class="string">@"json"</span>, <span class="string">@"tmx"</span>, <span class="string">@"ExportJson"</span>, <span class="string">@"plist"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一个<code>canonicalRequestForRequest</code>方法, 用来对request进行处理, 比如修改header信息等.这里我没做操作:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSURLRequest</span> *)canonicalRequestForRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转发"><a href="#转发" class="headerlink" title="转发:"></a>转发:</h3><p>在<code>canInitWithRequest</code>拦截成功之后, 会走<code>startLoading</code> 方法, 我们可以在这个方法中做资源的替换操作.</p>
<p><strong>这里提示一下, 我目前的资源替换处理方式是提前在APP启动的时候, 通过接口比对, 下载对应的资源文件到沙盒内, 沙盒内的路径遵循跟服务端<code>URL</code>的<code>path</code>路径一致, 这样替换的时候, 直接取<code>URL</code>的<code>path</code>, 然后拼接到沙盒<code>Library/cache</code>后, 就可以直接拿到对应的资源, 然后进行替换.</strong></p>
<p>首先定义一个静态字符, 用来标记我们已经拦截处理过的request, 不然会循环引用:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span>* <span class="keyword">const</span> kURLProtocolMark = <span class="string">@"kURLProtocolMark"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LPURLProtocol</span> ()&lt;<span class="title">NSURLSessionDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSessionDataTask</span> *task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>以下是<code>startLoading</code>的实现, 其中<code>[LPGMManager sharedManager].gmUrl</code>是我的h5请求的域名,你们可以替换成你们自己的,</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)startLoading &#123;</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableReqeust = [[<span class="keyword">self</span> request] mutableCopy];</span><br><span class="line">    <span class="comment">//给我们处理过的请求设置一个标识符, 防止无限循环,</span></span><br><span class="line">    [<span class="built_in">NSURLProtocol</span> setProperty:@YES forKey:kURLProtocolMark inRequest:mutableReqeust];</span><br><span class="line">    <span class="comment">//这里最好加上缓存判断，加载本地离线文件, 如果是这个域名的URL则进行资源替换</span></span><br><span class="line">    <span class="keyword">if</span> ([mutableReqeust.URL.absoluteString hasPrefix:[LPGMManager sharedManager].gmUrl]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *filePath = mutableReqeust.URL.path;<span class="comment">//拿到URL的path路径</span></span><br><span class="line">        <span class="built_in">NSString</span> *localFilePath = [[LPGMManager sharedManager].localFolderPath stringByAppendingString:filePath];<span class="comment">//拼接获取到本地沙盒路径</span></span><br><span class="line">        <span class="keyword">if</span> (![[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:localFilePath]) &#123; </span><br><span class="line">        <span class="comment">//文件不存在，去下载:这里你们也可以再检测到本地没有对应文件, 实时去请求下载</span></span><br><span class="line">        <span class="comment">//[self downloadResourcesWithRequest:[mutableReqeust copy]];</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加载本地资源</span></span><br><span class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:localFilePath];</span><br><span class="line">        [<span class="keyword">self</span> sendResponseWithData:data mimeType:[<span class="keyword">self</span> getMimeTypeWithFilePath:mutableReqeust.URL.pathExtension]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//不需要拦截的则转发给系统去进行正常的请求流程</span></span><br><span class="line">        <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration] delegate:<span class="keyword">self</span> delegateQueue:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">self</span>.task = [session dataTaskWithRequest:<span class="keyword">self</span>.request];</span><br><span class="line">        [<span class="keyword">self</span>.task resume];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)sendResponseWithData:(<span class="built_in">NSData</span> *)data mimeType:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)mimeType &#123;</span><br><span class="line">    <span class="comment">// 这里需要用到MIMEType</span></span><br><span class="line">    <span class="built_in">NSURLResponse</span> *response = [[<span class="built_in">NSURLResponse</span> alloc] initWithURL:<span class="keyword">super</span>.request.URL</span><br><span class="line">                                                        MIMEType:mimeType</span><br><span class="line">                                           expectedContentLength:<span class="number">-1</span></span><br><span class="line">                                                textEncodingName:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//硬编码 开始嵌入本地资源到web中</span></span><br><span class="line">    [[<span class="keyword">self</span> client] URLProtocol:<span class="keyword">self</span> didReceiveResponse:response cacheStoragePolicy:<span class="built_in">NSURLCacheStorageNotAllowed</span>];</span><br><span class="line">    [[<span class="keyword">self</span> client] URLProtocol:<span class="keyword">self</span> didLoadData:data];</span><br><span class="line">    [[<span class="keyword">self</span> client] URLProtocolDidFinishLoading:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)getMimeTypeWithFilePath:(<span class="built_in">NSString</span> *)filePath&#123;</span><br><span class="line">    <span class="built_in">CFStringRef</span> pathExtension = (__bridge_retained <span class="built_in">CFStringRef</span>)[filePath pathExtension];</span><br><span class="line">    <span class="built_in">CFStringRef</span> type = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, pathExtension, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">CFRelease</span>(pathExtension);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//The UTI can be converted to a mime type:</span></span><br><span class="line">    <span class="built_in">NSString</span> *mimeType = (__bridge_transfer <span class="built_in">NSString</span> *)UTTypeCopyPreferredTagWithClass(type, kUTTagClassMIMEType);</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">CFRelease</span>(type);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mimeType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="回调"><a href="#回调" class="headerlink" title="回调:"></a>回调:</h3><p>既是面向切面的编程，就不能影响到原来网络请求的逻辑。所以上一步将网络请求转发出去以后，当收到网络请求的返回，还需要再将返回值返回给原来发送网络请求的地方。<br>主要需要需要调用到:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didFailWithError:error];</span><br><span class="line">[<span class="keyword">self</span>.client URLProtocolDidFinishLoading:<span class="keyword">self</span>];</span><br><span class="line">[<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didReceiveResponse:response cacheStoragePolicy:<span class="built_in">NSURLCacheStorageNotAllowed</span>];</span><br><span class="line">[<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didLoadData:data];</span><br></pre></td></tr></table></figure>

<p>这四个方法来回调给原来发送网络请求的地方。<br> 这里假设我们在转发过程中是使用<code>NSURLSession</code>发送的网络请求，那么在<code>NSURLSession</code>的回调方法中，我们做相应的处理即可。并且我们也可以对这些返回，进行定制化处理。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didCompleteWithError:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didFailWithError:error];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span>.client URLProtocolDidFinishLoading:<span class="keyword">self</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionResponseDisposition</span>))completionHandler &#123;</span><br><span class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didReceiveResponse:response cacheStoragePolicy:<span class="built_in">NSURLCacheStorageNotAllowed</span>];</span><br><span class="line"></span><br><span class="line">    completionHandler(<span class="built_in">NSURLSessionResponseAllow</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didLoadData:data];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结束"><a href="#结束" class="headerlink" title="结束:"></a>结束:</h3><p>在一个网络请求完全结束以后，<code>NSURLProtocol</code>回调用到</p>
<p><code>- (void)stopLoading</code></p>
<p>在该方法里，我们完成在结束网络请求的操作。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)stopLoading &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.task != <span class="literal">nil</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.task  cancel];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>那么以上我们就针对<code>WKWebView</code>实现了<code>NSURLProtocol</code>的代理转发.</strong></p>
<p>参考文章:<br><a href="https://www.jianshu.com/p/02781c0bbca9" target="_blank" rel="noopener">NSURLProtocol全攻略</a><br><a href="https://www.jianshu.com/p/f88c9d094aa5" target="_blank" rel="noopener">iOS WKWebview实现拦截js，css，html以及图片资源替换为本地资源的两种方式（NSUrlProtocol）</a></p>
<p><a href="https://juejin.im/post/5b6a96bee51d45191717653c" target="_blank" rel="noopener">WkWebView拦截替换本地音频，图片</a></p>
]]></content>
      <categories>
        <category>iOS开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>WKWebView</tag>
        <tag>热更新</tag>
      </tags>
  </entry>
</search>
